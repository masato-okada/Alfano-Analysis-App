// pages/index.js
import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import {
  LineChart, Line, BarChart, Bar, PieChart, Pie, 
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, 
  ResponsiveContainer, Cell
} from 'recharts';

export default function Home() {
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('summary');
  
  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

  useEffect(() => {
    // 実際の環境では、APIエンドポイントからデータを取得します
    fetch('/api/analysis')
      .then(response => {
        if (!response.ok) {
          throw new Error('データの取得に失敗しました');
        }
        return response.json();
      })
      .then(data => {
        setAnalysisData(data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  if (loading) return <div className="container mx-auto p-4"><p>データを読み込み中...</p></div>;
  if (error) return <div className="container mx-auto p-4"><p>エラー: {error}</p></div>;
  if (!analysisData) return <div className="container mx-auto p-4"><p>データがありません</p></div>;

  return (
    <div className="container mx-auto p-4">
      <Head>
        <title>Alfanoデータ分析ダッシュボード</title>
        <meta name="description" content="Alfanoデータの分析結果を表示するダッシュボード" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="text-3xl font-bold mb-6">Alfanoデータ分析ダッシュボード</h1>
        
        <div className="mb-6">
          <div className="flex border-b">
            <button 
              className={`py-2 px-4 ${activeTab === 'summary' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
              onClick={() => setActiveTab('summary')}
            >
              概要
            </button>
            <button 
              className={`py-2 px-4 ${activeTab === 'data' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
              onClick={() => setActiveTab('data')}
            >
              データサンプル
            </button>
            {analysisData.clusters && (
              <button 
                className={`py-2 px-4 ${activeTab === 'clusters' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                onClick={() => setActiveTab('clusters')}
              >
                クラスター分析
              </button>
            )}
          </div>
          
          {activeTab === 'summary' && (
            <div className="mt-4">
              <h2 className="text-xl font-semibold mb-3">データ概要</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-gray-100 p-4 rounded-lg">
                  <h3 className="font-medium">行数</h3>
                  <p className="text-2xl">{analysisData.summary.rows}</p>
                </div>
                <div className="bg-gray-100 p-4 rounded-lg">
                  <h3 className="font-medium">列数</h3>
                  <p className="text-2xl">{analysisData.summary.columns}</p>
                </div>
                <div className="bg-gray-100 p-4 rounded-lg">
                  <h3 className="font-medium">欠損値</h3>
                  <p className="text-2xl">{analysisData.summary.missing_values}</p>
                </div>
              </div>
              
              <h3 className="text-lg font-semibold mt-6 mb-2">列一覧</h3>
              <div className="bg-gray-100 p-4 rounded-lg">
                <ul className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {analysisData.columns.map((column, index) => (
                    <li key={index} className="p-2">{column}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
          
          {activeTab === 'data' && (
            <div className="mt-4">
              <h2 className="text-xl font-semibold mb-3">データサンプル</h2>
              <div className="overflow-x-auto">
                <table className="min-w-full bg-white border">
                  <thead>
                    <tr>
                      {analysisData.columns.map((column, index) => (
                        <th key={index} className="border p-2 bg-gray-100">{column}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {analysisData.data_sample.map((row, rowIndex) => (
                      <tr key={rowIndex}>
                        {analysisData.columns.map((column, colIndex) => (
                          <td key={colIndex} className="border p-2">{row[column]}</td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
          
          {activeTab === 'clusters' && analysisData.clusters && (
            <div className="mt-4">
              <h2 className="text-xl font-semibold mb-3">クラスター分析結果</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3 className="text-lg font-medium mb-2">クラスターサイズ</h3>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={Object.entries(analysisData.clusters.sizes).map(([cluster, size]) => ({
                            name: `クラスター ${cluster}`,
                            value: size
                          }))}
                          cx="50%"
                          cy="50%"
                          outerRadius={80}
                          fill="#8884d8"
                          dataKey="value"
                          label={({name, percent}) => `${name} (${(percent * 100).toFixed(0)}%)`}
                        >
                          {Object.keys(analysisData.clusters.sizes).map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </div>
                
                <div>
                  <h3 className="text-lg font-medium mb-2">クラスター特性</h3>
                  <div className="h-64">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={Object.entries(analysisData.clusters.cluster_means).map(([feature, values]) => {
                          const entry = { name: feature };
                          Object.entries(values).forEach(([cluster, value]) => {
                            entry[`クラスター ${cluster}`] = parseFloat(value.toFixed(2));
                          });
                          return entry;
                        })}
                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        {Object.keys(analysisData.clusters.cluster_means[Object.keys(analysisData.clusters.cluster_means)[0]]).map((cluster, index) => (
                          <Bar
                            key={`bar-${index}`}
                            dataKey={`クラスター ${cluster}`}
                            fill={COLORS[index % COLORS.length]}
                          />
                        ))}
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}